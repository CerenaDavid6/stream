// stream is a ... TODO: finish this

{
	default: default
	slice: slice
	map: map
} := import('std')
{
	trim: trim
} := import('str')
{
	format: format
	printf: printf
} := import('fmt')
fs := import('fs')
datetime := import('datetime')
path := import('path')
http := import('http')

model := import('model')
view := import('view')

Port := 10020
PageHeaders := {
	'Content-Type': 'text/html'
}

server := http.Server()

with server.route('/updates/:timestamp') fn(params) fn(req, end) if req.method {
	'GET' -> if timestamp := int(params.timestamp) {
		? -> end({
			status: 400
			body: 'invalid time ' << params.timestamp
		})
		_ -> with model.updatesAtTime(timestamp) fn(updates) if updates {
			? -> end({
				status: 500
				headers: PageHeaders
				body: view.page(
					view.search() <<
						'No updates from this time'
				)
			})
			_ -> end({
				status: 200
				headers: PageHeaders
				body: view.page(
					view.search() <<
						view.feed(updates)
				)
			})
		}
	}
}

with server.route('/updates') fn(params) fn(req, end) if req.method {
	'POST' -> {
		// assume urlencoded form data format s=(.*)
		status := req.body |> slice(2) |> http.percentDecode() |> trim()
		with model.appendUpdate(status) fn(res) if res {
			true -> end({
				status: 303
				headers: { Location: '/' }
				body: ''
			})
			_ -> end({
				status: 500
				body: 'Error saving update. Please try again.'
			})
		}
	}
	_ -> end(http.MethodNotAllowed)
}

with server.route('/on/:year/:month/:day') fn(params) fn(req, end) if req.method {
	'GET' -> if [year, month, day] := [params.year, params.month, params.day] |> map(int) {
		[?, _, _], [_, ?, _], [_, _, ?] -> end({
			status: 400
			body: 'invalid request'
		})
		_ -> with model.updatesOnDay(year, month, day) fn(updates) if updates {
			? -> end({
				status: 500
				headers: PageHeaders
				body: view.page(
					view.search() <<
						'Could not read latest updates'
				)
			})
			_ -> end({
				status: 200
				headers: PageHeaders
				body: view.page(
					view.search() <<
						view.feed(updates)
					'{{0}}/{{1}}/{{2}}' |> format(params.year, params.month, params.day)
				)
			})
		}
	}
	_ -> end(htpt.MethodNotAllowed)
}

with server.route('/s/*staticPath') fn(params) {
	http.handleStatic(path.join('./static', params.staticPath))
}

with server.route('/author/') fn(params) fn(req, end) if req.method {
	'GET' -> end({
		status: 200
		headers: PageHeaders
		body: view.page(
			view.author()
			'author'
		)
	})
	_ -> end(http.MethodNotAllowed)
}

with server.route('/') fn(params) fn(req, end) if req.method {
	'GET' -> {
		page := int(params.p) |> default(1)
		count := int(params.n) |> default(50)
		query := params.q

		with model.latestUpdates(page, count, query) fn(updates, last?, next?) if updates {
			? -> end({
				status: 500
				headers: PageHeaders
				body: view.page(
					view.search() <<
						'Could not read latest updates'
				)
			})
			_ -> end({
				status: 200
				headers: PageHeaders
				body: view.page(
					view.search(query) <<
						view.index(updates, last?, next?, page, count, query)
					?
				)
			})
		}
	}
	_ -> end(http.MethodNotAllowed)
}

server.start(Port)
printf('Stream server running at {{0}}', Port)

